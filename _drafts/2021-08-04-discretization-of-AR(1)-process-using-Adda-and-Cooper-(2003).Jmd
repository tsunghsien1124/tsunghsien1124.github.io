---
layout: post
title : Discretization of AR(1) Process Using Adda and Copper (2003)
permalink: /Computation/:title/
---

Discretization plays a necessary role.
There are multiple widely used approaches, including Tauchen, Rouwenhorst, and **Adda and Cooper (2003)**[^1] (hereafter, AC2003).
Package `QuantEcon` in `Julia` contains the former two; yet, I cannot find a decent implementation for the last one in `Julia`.
Hence, this blog aims to fill this void.
In the following, I will firstly explain how AC2003 works and then show how it can be coded in `Julia`.

#### How AC(2003) Works

This section will mostly follow the original treatment in their book, albeit slightly contaminated with my preference and interpretation.
Suppose that we have the following AR(1) process of $\epsilon$.

\\[ \begin{equation} \epsilon_t = \mu (1-\rho) + \rho \epsilon_{t-1} + u_t, \end{equation} \\]

where $\mu$, $\rho$, and $u_t$ denote unconditional mean, AR(1) coefficient, as well as normally distributed innovation with mean zero and variance $\sigma^2$, respectively.

#### How to Program AC2003 in `Julia`

```julia
function adda_cooper_2003(N::Integer, ρ::Real, σ::Real; μ::Real = 0.0)
    """
    Discretization of AR(1) process proposed by Adda and Cooper (2003)

    Inputs:
        - N: number of states
        - ρ: AR(1) coefficient
        - σ: s.d. of innovation
        - μ: unconditional mean (default value is set to zero)

    Author: Tsung-Hsien Li
    Email: tsung-hsien.li@gess.uni-mannheim.de
    """

    σ_ϵ = σ / sqrt(1.0 - ρ^2)
    ϵ = σ_ϵ .* quantile.(Normal(), [i/N for i = 0:N]) .+ μ
    z = zeros(N)
    for i = 1:N
        if i != (N+1)/2
            z[i] = N * σ_ϵ * (pdf(Normal(), (ϵ[i]-μ)/σ_ϵ) - pdf(Normal(), (ϵ[i+1]-μ)/σ_ϵ)) + μ
        end
    end
    Π = zeros(N,N)
    if ρ == 0.0
        Π .= 1/N
    else
        for i = 1:N, j = 1:N
            f(u) = exp(-(u-μ)^2/(2*σ_ϵ^2)) * (cdf(Normal(), (ϵ[j+1]-μ*(1.0-ρ)-ρ*u)/σ) - cdf(Normal(), (ϵ[j]-μ*(1.0-ρ)-ρ*u)/σ))
            integral, err = quadgk(u -> f(u), ϵ[i], ϵ[i+1])
            Π[i,j] = (N/sqrt(2*π*σ_ϵ^2)) * integral
        end
    end
    return z, Π
end
```

```julia, echo = false, results = "hidden"
f(x) = x^2
```

Such function evaluated at 2 is given by $f(2) = `j f(2)`$.

\\[\log(2) + 5y = \int_0^\infty \frac{1}{z} \, dz\\]

#### Test Plot.jl

Load Plots.jl

```julia
using Plots
```

Plot a figure with randomly generated data.

```julia
N = 100
x = rand(N)
y = rand(N)
plot(x, y)
```

[^1]: Adda, J. and R. W. Cooper (2003), *"Dynamic Economics: Quantitative Methods and Applications"*, MIT Press.
